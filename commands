
scp -r -P 2222 .\httpd-root\ .\start_it.sh .\static\ s409659@se.ifmo.ru:./web/lab1/

ssh -p 2222 s409659@helios.cs.ifmo.ru -L 39564:localhost:39564




Что такое API Fetch?

Fetch API — это современный JavaScript API для выполнения сетевых запросов, таких как выборка ресурсов с сервера. Он обеспечивает более удобный и гибкий способ выполнения HTTP-запросов по сравнению с традиционным объектом XMLHttpRequest (XHR). Fetch API — это API на основе обещаний, что означает, что он возвращает обещание, которое разрешается в объект ответа.

Как Fetch API связан с AJAX?

Fetch API является частью технологии AJAX (асинхронный JavaScript и XML), которая обеспечивает асинхронную связь с сервером без перезагрузки страницы. AJAX позволяет веб-страницам обновляться динамически, улучшая пользовательский опыт.

Fetch API — это современная реализация концепции AJAX, которая обеспечивает более эффективный и гибкий способ выполнения асинхронных запросов. Он разработан для работы с современными веб-технологиями, такими как HTML5, и поддерживается большинством современных браузеров.

Какие существуют альтернативы Fetch API?

Существует несколько альтернатив API Fetch для выполнения сетевых запросов в JavaScript:

XMLHttpRequest (XHR) : традиционный способ выполнения запросов AJAX, который по-прежнему поддерживается большинством браузеров.
jQuery.ajax() : популярная библиотека JavaScript jQuery предоставляет удобный способ создания AJAX-запросов с помощью своего ajax()метода.
Axios : популярная библиотека JavaScript для выполнения HTTP-запросов, которая обеспечивает более удобный и гибкий способ выполнения запросов по сравнению с Fetch API.
Зачем использовать Fetch API?

Есть несколько причин использовать Fetch API:

Современный и эффективный : API Fetch — это современная реализация концепции AJAX, обеспечивающая более эффективный и гибкий способ выполнения асинхронных запросов.
Основанный на обещаниях : API Fetch возвращает обещание, что упрощает обработку асинхронных запросов и ошибок.
Широкая поддержка браузеров : API Fetch поддерживается большинством современных браузеров, включая Chrome, Firefox, Edge и Safari.
Простота использования : API Fetch обеспечивает простой и интуитивно понятный способ выполнения HTTP-запросов с минимальным объемом кода.
Собственная реализация : API Fetch является собственной реализацией, что означает, что он не зависит от каких-либо внешних библиотек или фреймворков.
Подводя итог, можно сказать, что Fetch API — это современный JavaScript API для выполнения сетевых запросов, который является частью технологии AJAX. Он обеспечивает более удобный и гибкий способ выполнения асинхронных запросов по сравнению с традиционными методами и широко поддерживается современными браузерами.










onclick: Это атрибут события, который определяет сценарий, который будет выполнен при щелчке по элементу.
event.preventDefault(): Это метод, который предотвращает выполнение действия по умолчанию для события. В этом случае он предотвращает поведение элемента по умолчанию при щелчке.
Когда вы нажимаете на элемент, например кнопку или ссылку, браузер выполняет действие по умолчанию. Например, когда вы нажимаете на ссылку, браузер переходит на связанный URL. Когда вы нажимаете на кнопку, браузер отправляет форму.

Вызывая event.preventDefault(), вы можете предотвратить возникновение этого поведения по умолчанию. Это полезно, когда вы хотите обрабатывать событие щелчка программно, а не позволять браузеру выполнять его действие по умолчанию.

В контексте отправки формы event.preventDefault()может использоваться для предотвращения отправки формы при нажатии кнопки отправки. Это позволяет вам выполнять проверку или другую обработку данных формы перед ее отправкой.





-----------------------------------------
Протокол HTTP. Структура запросов и ответов, методы запросов, коды ответов сервера, заголовки запросов и ответов.
Язык разметки HTML. Особенности, основные теги и атрибуты тегов.
Структура HTML-страницы. Объектная модель документа (DOM).
HTML-формы. Задание метода HTTP-запроса. Правила размещения форм на страницах, виды полей ввода.
Каскадные таблицы стилей (CSS). Структура - правила, селекторы. Виды селекторов, особенности их применения. Приоритеты правил. Преимущества CSS перед непосредственным заданием стилей через атрибуты тегов.
LESS, Sass, SCSS. Ключевые особенности, сравнительные характеристики. Совместимость с браузерами, трансляция в "обычный" CSS.
Клиентские сценарии. Особенности, сферы применения. Язык JavaScript.
Версии ECMAScript, новые возможности ES6 и ES7.
Синхронная и асинхронная обработка HTTP-запросов. AJAX.
Библиотека jQuery. Назначение, основные API. Использование для реализации AJAX и работы с DOM.
Реализация AJAX с помощью SuperAgent.
Серверные сценарии. CGI - определение, назначение, ключевые особенности.
FastCGI - особенности технологии, преимущества и недостатки относительно CGI.
FastCGI сервер на языке Java.



