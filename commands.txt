apache - 47075
fcgi - 47085

scp -r -P 2222 .\httpd-root\ .\start_it.sh .\static\ s409659@se.ifmo.ru:./

ssh -p 2222 s409659@helios.cs.ifmo.ru -L 47075:localhost:47075



1. Псевдоклассовые селекторы

:hover- выбирает элемент, когда пользователь наводит на него курсор
:active- выбирает элемент при его активации (например, щелчке)
:focus- выбирает элемент, когда он находится в фокусе (например, когда пользователь нажимает на поле ввода формы)
:visited- выбирает ссылку, которая была посещена
:link- выбирает не посещенную ссылку
:first-child- выбирает первый дочерний элемент своего родителя
:last-child- выбирает последний дочерний элемент своего родителя
:nth-child(n)- выбирает n-ный дочерний элемент своего родителя
:enabled- выбирает элемент формы, который включен
:disabled- выбирает элемент формы, который отключен
:checked- выбирает флажок или переключатель, который отмечен

2. Селекторы элементов

h1- выбирает все <h1>элементы
p- выбирает все <p>элементы
div- выбирает все <div>элементы
a- выбирает все <a>элементы
img- выбирает все <img>элементы
input- выбирает все <input>элементы
table- выбирает все <table>элементы
tr- выбирает все <tr>элементы
td- выбирает все <td>элементы

3. Селекторы псевдоэлементов

::before- выбирает псевдоэлемент, который вставляется перед элементом
::after- выбирает псевдоэлемент, который вставляется после элемента
::first-line- выбирает первую строку элемента
::first-letter- выбирает первую букву элемента
::selection- выбирает часть элемента, выбранную пользователем

4. Селекторы классов

.header- выбирает все элементы с классомheader
.footer- выбирает все элементы с классомfooter
.nav- выбирает все элементы с классомnav
.container- выбирает все элементы с классомcontainer

5. Свойства CSS — наследование и каскадирование

Наследование : Некоторые свойства CSS наследуются от родительских элементов, таких как font-family, color, и text-align. Например:
body {
  font-family: Arial, sans-serif;
}
p {
  /* inherits font-family from body */
}

Каскадирование: стили CSS могут быть каскадированы из нескольких таблиц стилей или из нескольких правил в одной таблице стилей. Стили применяются в следующем порядке:
Стили браузера по умолчанию
Внешние таблицы стилей (связанные или импортированные)
Внутренние стили (в <style>блоке)
Встроенные стили (в style атрибуте)
Например:
/* external stylesheet */
body {
  background-color: #f2f2f2;
}

/* internal stylesheet */
<style>
  body {
    background-color: #fff;
  }
</style>

<!-- inline style -->
<body style="background-color: #ccc;">
  <!-- content -->
</body>
В этом примере встроенный стиль переопределит внутренние и внешние стили, а цвет фона элемента <body>будет #ccc.





Что такое API Fetch?
    JavaScript API для выполнения сетевых запросов
    API на основе обещаний, что означает, что он возвращает обещание, которое разрешается в объект ответа
    В JavaScript Promise — представляет значение, которое может быть пока недоступно, но будет разрешено в какой-то момент в будущем.
    Promise может находиться в одном из трех состояний: Ожидание, Выполнено, Отклонено
    Обещания используются для обработки асинхронных операций
Fetch API — это современная реализация концепции AJAX

Какие существуют альтернативы Fetch API?
XMLHttpRequest (XHR) : традиционный способ выполнения запросов AJAX, который по-прежнему поддерживается большинством браузеров.
jQuery.ajax() : популярная библиотека JavaScript jQuery предоставляет удобный способ создания AJAX-запросов с помощью своего ajax() метода.
Axios : популярная библиотека JavaScript для выполнения HTTP-запросов, которая обеспечивает более удобный и гибкий способ выполнения запросов по сравнению с Fetch API.






Где хранить данные на клиенте
Куки (Cookies): это небольшие текстовые файлы, которые хранятся на клиенте и отправляются на сервер при каждом запросе.
Сессии (Sessions): это механизм хранения данных на сервере, который связан с конкретным пользователем. Когда пользователь авторизуется, сервер создает сессию и хранит данные о пользователе в этой сессии. Сессии обычно хранятся на сервере, но могут быть также хранены на клиенте в виде куки.
SessionStorage: SessionStorage - это механизм хранения данных на клиенте, который позволяет хранить данные только в течение одной сессии. Когда пользователь закрывает браузер, данные в sessionStorage удаляются.
LocalStorage: LocalStorage - это механизм хранения данных на клиенте, который позволяет хранить данные на постоянной основе. Данные в localStorage не удаляются, даже если пользователь закрывает браузер.
IndexedDB: IndexedDB - это механизм хранения данных на клиенте, который позволяет хранить большие объемы данных в виде базы данных. IndexedDB поддерживает транзакции и индексирование данных.
Web Storage: Web Storage - это механизм хранения данных на клиенте, который позволяет хранить данные в виде ключ-значение. Web Storage поддерживает два типа хранения: sessionStorage и localStorage.
Cache API: Cache API - это механизм хранения данных на клиенте, который позволяет хранить данные в виде кэша. Cache API позволяет хранить данные на постоянной основе и поддерживает управление кэшем.
Service Worker: Service Worker - это механизм хранения данных на клиенте, который позволяет хранить данные в виде кэша. Service Worker позволяет хранить данные на постоянной основе и поддерживает управление кэшем.







=============
Метод event.preventDefault() используется для предотвращения выполнения действия по умолчанию для события.
В контексте onclick обработчика событий event.preventDefault() используется для предотвращения действия по умолчанию события щелчка, которое заключается в отправке формы или переходе по ссылке.
При отправке формы или нажатии на ссылку браузер выполняет действие по умолчанию, например, отправляет данные формы на сервер или переходит на новую страницу.
Вызывая event.preventDefault(), вы можете предотвратить выполнение этого действия по умолчанию, что позволяет вам обрабатывать событие программно.
В этом конкретном случае event.preventDefault() используется в сочетании с sendData() для предотвращения отправки формы обычным способом.
Вместо этого sendData() вызывается функция, которая, скорее всего, отправляет данные формы на сервер с помощью запроса AJAX или какого-либо другого механизма.
Отключив отправку форм по умолчанию, вы сможете получить больший контроль над процессом отправки форм, например:
Проверка данных формы перед отправкой на сервер
Отправка данных формы с помощью запроса AJAX вместо полной перезагрузки страницы
Выполнение дополнительной обработки или расчетов перед отправкой данных формы
Предотвращение многократной отправки формы
В целом, event.preventDefault() это полезный метод для переопределения поведения события по умолчанию и предоставления вместо него пользовательской реализации.
=================
onclick: Это атрибут события, который определяет сценарий, который будет выполнен при щелчке по элементу.
event.preventDefault(): Это метод, который предотвращает выполнение действия по умолчанию для события. В этом случае он предотвращает поведение элемента по умолчанию при щелчке.
Когда вы нажимаете на элемент, например кнопку или ссылку, браузер выполняет действие по умолчанию. Например, когда вы нажимаете на ссылку, браузер переходит на связанный URL. Когда вы нажимаете на кнопку, браузер отправляет форму.
Вызывая event.preventDefault(), вы можете предотвратить возникновение этого поведения по умолчанию. Это полезно, когда вы хотите обрабатывать событие щелчка программно, а не позволять браузеру выполнять его действие по умолчанию.
В контексте отправки формы event.preventDefault()может использоваться для предотвращения отправки формы при нажатии кнопки отправки. Это позволяет вам выполнять проверку или другую обработку данных формы перед ее отправкой.













ВОПРОСЫ
-----------------------------------------
Протокол HTTP. Структура запросов и ответов, методы запросов, коды ответов сервера, заголовки запросов и ответов.
    Структура запросов
        Стартовая строка (start line): она содержит метод запроса, URL-адрес ресурса и версию протокола.
        Заголовки (headers): они содержат дополнительную информацию о запросе, такую как тип данных, кодировку и т. д.
        Тело запроса (request body): оно содержит данные, которые отправляются на сервер.
    ПРИМЕР:
    POST /users HTTP/1.1
    Host: example.com
    Content-Type: application/json
    Content-Length: 57
    {
      "name": "John Doe",
      "age": 30
    }

    Структура ответов
        Стартовая строка (start line): она содержит версию протокола, код состояния и текстовое описание кода состояния.
        Заголовки (headers): они содержат дополнительную информацию об ответе, такую как тип данных, кодировку и т. д.
        Тело ответа (response body): оно содержит данные, которые отправляются клиенту.
    ПРИМЕР:
    HTTP/1.1 201 Created
    Content-Type: application/json
    Content-Length: 34
    {
      "id": 123,
      "name": "John Doe",
      "age": 30
    }

    Методы запросов
        GET: запросить ресурс с сервера.
        POST: отправить данные на сервер для обработки.
        PUT: обновить ресурс на сервере.
        DELETE: удалить ресурс с сервера.

    Заголовки HTTP-запросов:
    Accept : указывает формат тела ответа, который может обработать клиент (например application/json, text/html, и т. д.)
    Accept-Language : указывает язык текста ответа, который предпочитает клиент (например en-US, fr-FR, и т. д.)
    Авторизация : предоставляет учетные данные аутентификации или токены для доступа к защищенным ресурсам.
    Content-Type : указывает формат тела запроса (например application/json, multipart/form-dataи т. д.)
    Content-Length : указывает размер тела запроса в байтах.
    Хост : указывает доменное имя сервера.
    User-Agent : предоставляет информацию о клиентском программном обеспечении и операционной системе, сделавшей запрос.
    Cookie : отправляет файлы cookie на сервер для аутентификации или управления сеансом.
    Referer : указывает URL-адрес страницы, с которой был сделан запрос.

    Заголовки HTTP-ответа:
    Content-Type : определяет формат тела ответа (например application/json, text/html и т.д.)
    Content-Length : указывает размер тела ответа в байтах.
    Set-Cookie : устанавливает файлы cookie на клиенте для аутентификации или управления сеансом.
    Cache-Control : задает инструкции по кэшированию для ответа.
    Истекает : указывает дату и время, после которого ответ следует считать устаревшим.
    ETag : предоставляет уникальный идентификатор для ответа, что упрощает кэширование и управление версиями.
    Местоположение : указывает URL-адрес перенаправления или местоположение вновь созданного ресурса.
    Сервер : предоставляет информацию о программном обеспечении сервера и операционной системе.

Язык разметки HTML. Особенности, основные теги и атрибуты тегов.

Структура HTML-страницы. Объектная модель документа (DOM).

HTML-формы. Задание метода HTTP-запроса. Правила размещения форм на страницах, виды полей ввода.

Каскадные таблицы стилей (CSS). Структура - правила, селекторы. Виды селекторов, особенности их применения. Приоритеты правил. Преимущества CSS перед непосредственным заданием стилей через атрибуты тегов.

LESS, Sass, SCSS. Ключевые особенности, сравнительные характеристики. Совместимость с браузерами, трансляция в "обычный" CSS.

Клиентские сценарии. Особенности, сферы применения. Язык JavaScript.

Версии ECMAScript, новые возможности ES6 и ES7.

Синхронная и асинхронная обработка HTTP-запросов. AJAX.

Библиотека jQuery. Назначение, основные API. Использование для реализации AJAX и работы с DOM.

Реализация AJAX с помощью SuperAgent.

Серверные сценарии. CGI - определение, назначение, ключевые особенности.

FastCGI - особенности технологии, преимущества и недостатки относительно CGI.

FastCGI сервер на языке Java.




